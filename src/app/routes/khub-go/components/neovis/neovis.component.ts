/*               "Copyright 2020 Infosys Ltd.
               Use of this source code is governed by GPL v3 license that can be found in the LICENSE file or at https://opensource.org/licenses/GPL-3.0
               This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License version 3"*/
import { Component, OnInit } from '@angular/core';
// import { Network } from 'vis'; // "node_modules/vis/dist/vis-network.min.css",
import { MatSnackBar } from '@angular/material';
import { ActivatedRoute } from '@angular/router';
import { KhubService } from '../../../../services/khub.service';
import { RoutingService } from '../../../../services/routing.service';
@Component({
  selector: 'app-neovis',
  templateUrl: './neovis.component.html',
  styleUrls: ['./neovis.component.scss']
})
export class NeovisComponent implements OnInit {
  loader = true;
  noData = false;
  error = false;
  nodes: Array<any> = [];
  edges: Array<any> = [];
  groupArr: Array<string> = [];
  network: any;
  query = '';
  shown;
  constructor(
    private snackBar: MatSnackBar,
    private activatedRoute: ActivatedRoute,
    private khubSrv: KhubService,
    public routingSvc: RoutingService
  ) {}
  ngOnInit() {
    this.activatedRoute.params.subscribe(params => {
      this.query = params.topic;
      this.getMongoDbQuery();
    });
  }

  getMongoDbQuery() {
    const query1 =
      `match (s:AutogeneratedTopic) where s.topicName =~ '(?i).*${this.query}*'` +
      ` with s optional match p=(s)<-[:Is_Mapped_With_Topic]-(:KShopDocument) with s, collect(p)[..10]` +
      ` as data optional match q=(s)<-[:Is_Interested_In_Topic]-(:Employee) with s,data+collect(q)[..10]` +
      ` as data  optional match r=(s)-[:Is_Related_To]->(:AutogeneratedTopic) with s,data+collect(r)[..10]` +
      ` as data optional match t=(s)-[:Is_Same_Concept_As]->(:Skill) with s,data+collect(t)[..10]` +
      ` as data return * limit 300 `;
    const postData = {
      query: query1
    };
    this.khubSrv.fetchKnowData(postData).subscribe(
      data => {
        this.nodes = data.nodes;
        this.edges = data.edges;
        this.generateNode();
        this.generateLegend();
      },
      error => {
        this.openSnackBar('Something went wrong try after some time', 'close');
      }
    );
  }

  generateLegend() {
    try {
      this.nodes.map((cur: any) => {
        if (this.groupArr.indexOf(cur.group) === -1) {
          this.groupArr.push(cur.group);
        }
      });
      if (this.groupArr.length > 0) {
        this.groupArr.push('All');
      }
    } catch (e) {
      console.error(e);
    }
  }

  generateNode() {
    const container = document.getElementById('vizDemo');
    const data = {
      nodes: this.nodes,
      edges: this.edges
    };

    const options = {
      autoResize: true,
      interaction: {
        hover: true
      },
      groups: {
        Character: {
          color: '#8d38d6',
          shape: 'dot'
        },
        Project: {
          color: '#8d38d6',
          shape: 'dot'
        },
        AutomationTool: {
          color: '#d80000',
          shape: 'dot'
        },
        Skill: {
          color: '#ff8d00',
          shape: 'dot'
        },
        Employee: {
          color: '#00c5ff',
          shape: 'dot'
        },
        Document: {
          color: '#00b40c',
          shape: 'dot'
        },
        LearningContent: {
          color: '#7be0ac',
          shape: 'dot'
        },
        Certification: {
          color: '#b686e5',
          shape: 'dot'
        },
        Course: {
          color: '#f183a3',
          shape: 'dot'
        },
        AutogeneratedTopic: {
          color: '#fef683',
          shape: 'dot'
        },
        Demand: {
          color: '#474747',
          shape: 'dot'
        },
        KMTaxonomy: {
          color: '#57c2b6',
          shape: 'dot'
        },
        KShopDocument: {
          color: '#57c2b6',
          shape: 'dot'
        }
      },
      layout: {
        improvedLayout: false,
        hierarchical: {
          enabled: false,
          sortMethod: 'hubsize'
        }
      },
      nodes: {
        shape: 'dot',
        font: {
          size: 16,
          strokeWidth: 10
        },
        scaling: {
          label: {
            enabled: true
          }
        },
        shadow: {
          enabled: true
        },
        size: 15
      },
      edges: {
        arrows: {
          to: {
            enabled: true,
            type: 'arrow',
            scaleFactor: 1
          }
        },
        // dashes:true,
        shadow: {
          // enabled:true,
        },
        width: 2.5
      },
      physics: {
        adaptiveTimestep: true,
        stabilization: {
          iterations: 200,
          fit: true
        }
      }
    };

    // this.network = new Network(container, data, options);
    // this.loader = false;
    // const nodes = this.nodes;

    // this.network.on('click', function(params) {
    //   nodes.map((cur: any) => {
    //     if (cur.id === params.nodes[0] && cur.group === 'Project') {
    //     }
    //   });
    // });
  }

  showOnly(group: string) {
    try {
      const nodes1 = [];
      const edges1 = [];
      if (group !== 'All') {
        this.nodes.map((cur: any) => {
          if (cur.group === group) {
            nodes1.push(cur);
          }
        });
        this.network.setData({ nodes: nodes1, edges: this.edges });
      } else {
        this.network.setData({ nodes: this.nodes, edges: this.edges });
      }
      console.log(nodes1);
    } catch (e) {
      console.error(e);
    }
  }

  openSnackBar(message: string, action: string) {
    this.snackBar.open(message, action, {
      duration: 3000
    });
  }
}
